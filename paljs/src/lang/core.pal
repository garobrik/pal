id = <T>(t: T){t}

Eq: <T:>(T1: T, T2: T)[Type] = <T>(T1, T2) { (R:, f: ((T1)[T2], (T2)[T1])[R])[R] }

refl: <T:, v: T> [ Eq<_>(v, v) ] = <T, v, R>(f) { f(id<_>, id<_>) }

reduce: <T:, T1: T, T2: T>(P: Eq<_>(T1, T2), a: T1)[T2] = <T, T1, T2>(P) { P<_>((to, _){to}) }

expand: <T:, T1: T, T2: T>(P: Eq<_>(T1, T2), a: T2)[T1] = <T, T1, T2>(P) { P<_>((_, from){from}) }

--------------------

Nat: Type = <Result:>(baseCase: Result, inductiveStep: (Result)[Result])[Result]

zero: Nat = <Result>(baseCase, _){baseCase}

next: (Nat)[Nat] = (previous) {
  <Result>(baseCase, inductiveStep: (Result)[Result]) {
    inductiveStep(previous<_>(baseCase, inductiveStep))
  }
}

apply: <Result:>(Result, (Result)[Result], Nat)[Result] = 
  <Result>(init, step, nat) { nat<_>(init, step) }

--------------------

prop_nat_0: <Result:, initial: Result, step: (Result)[Result]> [
  Eq<_>(apply<_>(initial, step, zero), initial)
] = <_, _, _> { refl<_, _> }

applyNTimes: 
  <Result: <Nat>[Type]>(Result<zero>, <number: Nat>(Result<number>) [ Result<next(number)> ], number: Nat) [
    Result<number>
  ]

--------------------

List = <Element> {
  <Result:>(initial: Result, combine: (Element, Result)[Result])[Result]
}

empty: <Element:> [ List<Element> ] = <Element, Result>(initial, _){initial}

prepend: <Element:>(Element, List<Element>) [ List<Element> ] = 
  <Element>(element: Element, list: List<Element>) {
    <Result>(initial, combine: (Element, Result)[Result]) {
      list<_>(combine(element, initial), combine)
    }
  }

foldl: <Result:, Element:>(Result, (Element, Result)[Result], List<Element>)[Result] = 
  <Result, Element>(initial, combine: (Element, Result)[Result], list: List<Element>) {
    list<_>(initial, combine)
  }

prop_foldl_empty: <Result:, Element:, initial: Result, combine: (Element, Result)[Result]> [
  Eq<_>(foldl<_, _>(initial, combine, empty<_>), initial)
] = <_, _, _, _> { refl<_, _> }

prop_foldl_prepend: 
  <Result:, Element:, initial: Result, combine: (Element, Result)[Result], element: Element, list: List<E>> [
    Eq<_>(
      foldl<_, _>(initial, combine, prepend<_>(element, list)),
      foldl<_, _>(combine(element, initial), combine, list)
    )
  ] = <_, _, _, _, _, _> { refl<_, _> }

--------------------

dfoldl: 
  <Element:, Result: <List<Element>>[Type]>(Result<empty<_>>, (list: List<Element>, element: Element, Result<list>) [ Result<prepend<_>(element, list)> ], list: List<Element>) [
    Result<list>
  ]

--------------------

append: <Element:>(Element, List<Element>) [ List<Element> ] = 
  <_>(element) { foldl<_, _>(prepend<_>(element, empty<_>), prepend<_>) }

--------------------

reverse: <Element:>(List<Element>) [ List<Element> ] = <_> { foldl<_, _>(empty<_>, prepend<_>) }

prop_reverse_empty: <Element:> [ Eq<List<Element>>(reverse<_>(empty<_>), empty<_>) ] = 
  <_> { refl<_, _> }

--------------------

foldr: <Result:, Element:>(Result, (Element, Result)[Result], List<Element>)[Result] = 
  <Result, Element>(initial: Result, combine: (Element, Result)[Result], list: List<Element>) {
    foldl<_, _>(initial, combine, reverse<_>(list))
  }

prop_foldr_empty: <Result:, Element:, initial: Result, combine: (Element, Result)[Result]> [
  Eq<_>(foldr<_, _>(initial, combine, empty<_>), initial)
] = <_, _, _, _> { refl<_, _> }

prop_foldr_pre: <R: Type, E: Type, e: E, l: List<E>, init: R, f: (E, R)[R]> [
  Eq<R, f(e, foldr<R, E>(init, f, l)), foldr<R, E>(init, f, prepend<E>(e, l))>
]

prop_foldr_app: <R: Type, E: Type, e: E, l: List<E>, init: R, f: (E, R)[R]> [
  Eq<R, foldr<R, E>(f(e, init), f, l), foldr<R, E>(init, f, append<E>(e, l))>
]

--------------------

List2Fn: <Type, List<Type>>[Type] = <Result: Type, list: List<Type>> {
  foldr<_, _>(
    Result,
    (Element: Type, Accumulated: Type) { (Element)[Accumulated] },
    list
  )
}

prop_List2Fn_empty: <R: Type> [ Eq<Type, List2Fn<R, empty<Type>>, R> ] = <R: Type> { refl<_, _> }

prop_List2Fn_pre: <R: Type, L: List<Type>, E: Type> [
  Eq<Type, List2Fn<R, prepend<Type>(E, L)>, (E) [ List2Fn<R, L> ]>
]

prop_List2Fn_app: <R: Type, L: List<Type>, E: Type> [
  Eq<Type, List2Fn<(E)[R], L>, List2Fn<R, append<Type>(E, L)>>
]

--------------------

HList: <List<Type>>[Type] = <L: List<Type>> { <R: Type>(List2Fn<R, L>)[R] }

HListInd = <L: List<Type>> {
  (W: List<Type>, w: HList<W>) [
    List2Fn<(R: Type, List2Fn<List2Fn<R, L>, W>)[R], L>
  ]
}

mkHList: <L: List<Type>> [ List2Fn<HList<L>, L> ] = <L: List<Type>> {
  dfoldl<Type, HListInd>(
    (W: List<Type>, w: HList<W>){w},
    (Rest: List<Type>, E: Type, acc: HListInd<Rest>, W: List<Type>, w: HList<W>) {
      expand<
        Type,
        List2Fn<
          (R: Type, List2Fn<List2Fn<R, W>, append<Type>(E, Rest)>)[R],
          prepend<Type>(E, Rest)
        >,
        (E) [
          List2Fn<
            (R: Type, List2Fn<List2Fn<R, W>, append<Type>(E, Rest)>)[R],
            Rest
          >
        ]
      >(
        prop_List2Fn_pre<
          (R: Type, List2Fn<List2Fn<R, W>, append<Type>(E, Rest)>)[R],
          Rest,
          E
        >,
        (e: E) {
          acc(
            append<Type>(E, W),
            <R: Type>(f: List2Fn<R, append<Type>(E, W)>) {
              w<(E)[R]>(
                expand<
                  Type,
                  List2Fn<(E)[R], W>,
                  List2Fn<R, append<Type>(E, W)>
                >(
                  prop_List2Fn_app<R, W, E>,
                  f
                ),
                e
              )
            }
          )
        }
      )
    },
    L,
    empty<Type>,
    id
  )
}
